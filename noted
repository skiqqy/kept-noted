#!/bin/bash
# Defaults
version="2.0"
workdir="$HOME/Documents/noted"

### Start Helper Functions ###
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[92m'
NC='\033[0m'
usage () {
	cat << EOF
noted - Simple note keeping $version

Usage: noted [options]

Arguments:
	-h: Shows this message.
	-v: Enable verbose printing.
	-t: Force tty mode (WIP).
EOF
	exit $1
}
error () {
	printf "[${RED}ERROR${NC}] $1\n"
	exit $2
}

warning () {
	printf "[${YELLOW}WARNING${NC}] $1\n"
}

success () {
	printf "[${GREEN}SUCCESS${NC}] $1\n"
}

tick () {
	printf "$1 ${GREEN}âœ”${NC}\n"
}

sq () {
	echo $(sed -e 's/^"//' -e 's/"$//' <<< $1)
}

# Check that a dependency is met
# usage: assert_package ls
assert_package () {
	[ ! $(command -v "$1") ] && error "Missing Package \'$1\'."
}

# Upload a file
upload () {
	verbose "[UPLOADING] $1"
	route="$domain/upload/note"
	content=$(cat $1)
	fname=$(basename $1)
	curl -s -X POST -F "nic=$nic" -F "key=$privkey" -F "fname=$fname" -F "content=$content" $route > /dev/null
}

# Download a file
download () {
	route="$domain/download/note"
	fname=$(basename $1)
	echo $(curl -s -X POST -F "nic=$nic" -F "key=$privkey" -F "fname=$fname" $route)
}

# Sync a file
# usage: sync filename
sync () {
	ret=$(download $1)
	code=$(echo $ret | jq '.status')
	if [ ! -z $code ]  && [ "$code" -eq 0 ]
	then
		data=$(echo $ret | jq '.data')
		fname=$(echo $data | jq '.fname')
		content=$(echo $data | jq '.content')

		fname=$(sq "$fname")
		content=$(sq "$content")

		echo -en $content > $workdir/$fname
		echo "Sync for <$1> completed."
	else
		echo "Sync for <$1> failed."
	fi
}

# determine what file/note we will be writing/ syncing to.
# Results:
# file=NEW -> we create a new file.
# file=SYNC -> Sync all files.
# file=<filename>
setfile () {
	if [ -z $istty ]
	then
		height=$(ls -1 $workdir | wc -l)
		height=$(echo $height + 1 | bc)
		file=$(echo -e "NEW\nSYNC\nEXIT\n$(ls -1 $workdir)" | dmenu -l "$height" -p "Files:")
		if [ $? -eq 1 ]
		then
			exit 0 # User exited dmenu
		fi
	else
		i=0
		files=( "EXIT" "NEW" "SYNC" $(ls $workdir) )

		for file in ${files[@]}
		do
			echo "$i. $file"
			((i++))
		done
		read -p "Enter Choice: " input
		# TODO: Check that input is an int
		file=${files[$input]}
	fi
}

# Prep file, and set $file var
# Usage: open "some_file"
open () {
	sync $1 # Sync the file we want to write too.
	file="$workdir/$1"
	touch "$file"
}

# Prints message if verbose is set
verbose () {
	if [ ! -z $verbose ]
	then
		echo "$1"
	fi
}
### End Helper Functions ###

# Init function, generates config templates, and checks dependencies
init () {
	# Check dependencies
	assert_package dmenu
	assert_package jq

	# Begin
	if [ ! -d $workdir ]
	then
		mkdir $workdir
	fi

	if [ ! -f "$workdir/.key" ]
	then
		cat << EOF > "$workdir/.key"
nic=<your_nickname>
key=<your_key>
domain=http://localhost:5000
editor=vim
EOF
		error ".key file missing, generating \'$workdir/.key\'... Please fill it out."
	fi

	while IFS== read -r key val
	do
		if [ $key = 'key' ]
		then
			privkey=$val
		elif [ $key = 'nic' ]
		then
			nic=$val
		elif [ $key = 'domain' ]
		then
			domain=$val
		elif [ $key = 'editor' ]
		then
			editor=$val
		fi
	done < "$workdir/.key"
}

# This spawns a gui that allows interacting with noted.
gui () {
	setfile
	if [ $file = "NEW" ]
	then
		file=$(echo "" | dmenu -p "Enter Filename:")
	elif [ "$file" = "SYNC" ]
	then
		# Sync everything.
		for f in $workdir/*
		do
			sync "$f"
		done
		return 0
	elif [ "$file" = "EXIT" ]
	then
		exit 0
	fi

	if [ $? -eq 1 ]
	then
		return 0
	fi

	open $file

	height=$(wc -l "$file" | awk '{print $1}')
	prompt="Add/delete a task: "

	# Loop Credit too https://tools.suckless.org/dmenu/scripts/todo
	cmd=$(dmenu -l "$height" -p "$prompt" "$@" < "$file")
	while [ -n "$cmd" ]; do
		if grep -q "^$cmd\$" "$file"; then
			grep -v "^$cmd\$" "$file" > "$file.$$"
			mv "$file.$$" "$file"
			height=$(( height - 1 ))
		else
			echo "$cmd" >> "$file"
			height=$(( height + 1 ))
		fi

		cmd=$(dmenu -l "$height" -p "$prompt" "$@" < "$file")
	done
	### End Suckless

	# Update
	upload $file
}

cli () {
	clear
	setfile
	if [ $file = "NEW" ]
	then
		read -p "Enter Filename: " file
	elif [ "$file" = "SYNC" ]
	then
		# Sync everything.
		for f in $workdir/*
		do
			sync "$f"
		done
		return 0
	elif [ "$file" = "EXIT" ]
	then
		echo "Goodbye!"
		exit 0
	fi
	
	open $file
	$editor $file
	upload $file
}

main () {
	while getopts "hvt" opt
	do
		case $opt in
			h)
				usage 0
				;;
			v)
				verbose=1
				;;
			t)
				istty=0
				;;
			*)
				error "Invalid arg" 1
				;;
		esac
	done
	init

	for ((;;))
	do
		if [ -z $istty ]
		then
			gui
		else
			cli
		fi
	done
}

main "$@"
